# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""A user account that allows someone to log in"""
type Account {
  email: String!
  firstname: String!
  id: ID!
  lastname: String!
}

"""Circumstances of death"""
type Circumstances {
  address: String
  cause: String
  date: DateTime
  postal: String
  reasonForProcrastination: String
  time: String
  town: String
}

"""The client model"""
type Client {
  address: String
  callname: String
  dateOfBirth: DateTime
  emailAddress: String
  firstLetters: String
  firstname: String
  gender: String
  girlname: String
  lastname: String
  phoneNumber: String
  postal: String
  relation: String
  town: String
}

"""Commemorative Card"""
type CommemorativeCard {
  details: String
  total: String
  type: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""The deceased model"""
type Deceased {
  address: String
  amountOfChildren: Float
  amountOfMinors: Float
  bsn: String
  callname: String
  dateOfBirth: DateTime
  firstname: String
  gender: String
  girlname: String
  lastname: String
  maritalStatus: String
  postal: String
  religion: String
  title: String
  town: String
}

"""Church service/Farewell service"""
type Farewell {
  address: String
  carrying: String
  date: DateTime
  details: String
  location: String
  numberOfCarriers: String
  parkingSpaces: String
  pastor: String
  place: String
  postalCode: String
  startTime: String
}

"""Final care of deceased person"""
type FinalCare {
  clothes: String
  date: DateTime
  deletePacemaker: String
  detailsOfCare: String
  family: String
  location: String
  makeFingerprint: String
  makeUpHairStyleWishes: String
  wishesJewelryGlasses: String
}

"""The funeral model"""
type Funeral {
  account: Account
  circumstances: Circumstances
  client: Client
  commemorativecard: CommemorativeCard
  deceased: Deceased
  farewell: Farewell
  finalcare: FinalCare
  funeralletter: FuneralLetter
  id: ID!
  insurances: [Insurance!]
  lastCreationStep: Float
  transmissions: [Transmission!]
  visiting: [Visiting!]
}

"""Funeral letter"""
type FuneralLetter {
  details: String
  numberOfPorti: String
  numberOfShipments: String
  total: String
  type: String
}

"""Insurance object"""
type Insurance {
  company: String
  policynumber: String
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createFuneral: Funeral!
  login(input: LoginInput!): String
  logout: Boolean!
  register(input: RegisterInput!): Account
  saveCircumstances(circumstances: PersistCircumstancesInput!, funeralId: String!): Circumstances!
  saveClient(client: PersistClientInput!, funeralId: String!): Client!
  saveCommemorativeCard(commemorativecard: PersistCommemorativeCardInput!, funeralId: String!): CommemorativeCard!
  saveFarewell(farewell: PersistFarewellServiceInput!, funeralId: String!): Farewell!
  saveFinalCare(finalcare: PersistFinalCareInput!, funeralId: String!): FinalCare!
  saveFuneralLetter(funeralId: String!, funeralletter: PersistFuneralLetterInput!): FuneralLetter!
  saveInsurances(funeralId: String!, insurances: [PersistInsuranceInput!]!): Boolean!
  savePersonalia(funeralId: String!, personalia: PersistDeceasedInput!): Deceased!
  saveTransmissions(funeralId: String!, transmissions: [PersistTransmissionInput!]!): Boolean!
  saveVisiting(funeralId: String!, visiting: [PersistVisitingInput!]!): Boolean!
}

"""Circumstances of death"""
input PersistCircumstancesInput {
  address: String
  cause: String
  date: DateTime
  postal: String
  reasonForProcrastination: String
  time: String
  town: String
}

input PersistClientInput {
  address: String
  callname: String
  dateOfBirth: DateTime
  emailAddress: String
  firstLetters: String
  firstname: String
  gender: String
  girlname: String
  lastname: String
  phoneNumber: String
  postal: String
  relation: String
  town: String
}

"""Commemorative Cards"""
input PersistCommemorativeCardInput {
  details: String
  total: String
  type: String
}

input PersistDeceasedInput {
  address: String
  amountOfChildren: Float
  amountOfMinors: Float
  bsn: String
  callname: String
  dateOfBirth: DateTime
  firstname: String
  gender: String
  girlname: String
  lastname: String
  maritalStatus: String
  postal: String
  religion: String
  title: String
  town: String
}

"""Church service/Farewell service"""
input PersistFarewellServiceInput {
  address: String
  carrying: String
  date: DateTime
  details: String
  location: String
  numberOfCarriers: String
  parkingSpaces: String
  pastor: String
  place: String
  postalCode: String
  startTime: String
}

"""Final care of deceased person"""
input PersistFinalCareInput {
  clothes: String
  date: DateTime
  deletePacemaker: String
  detailsOfCare: String
  family: String
  location: String
  makeFingerprint: String
  makeUpHairstyleWishes: String
  wishesJewelryGlasses: String
}

"""Funeral letter"""
input PersistFuneralLetterInput {
  details: String
  numberOfPorti: String
  numberOfShipments: String
  total: String
  type: String
}

"""Insurance object"""
input PersistInsuranceInput {
  company: String
  policynumber: String
}

"""Transmission object"""
input PersistTransmissionInput {
  by: String
  date: DateTime
  from: String
  fromAddress: String
  fromPlace: String
  to: String
  toAddress: String
  toPlace: String
}

"""Visiting object"""
input PersistVisitingInput {
  date: DateTime
  kindOfVisit: String
  location: String
  specialNeeds: String
  timeOfArrival: DateTime
  timeOfLeave: DateTime
}

type Query {
  circumstances(id: String!): Circumstances
  client(id: String!): Client
  commemorativecard(id: String!): CommemorativeCard
  farewell(id: String!): Farewell
  finalcare(id: String!): FinalCare
  funeral(id: String): Funeral
  funeralletter(id: String!): FuneralLetter
  funerals: [Funeral!]!
  insurances(id: String!): [Insurance!]
  loggedIn: Account!
  personalia(id: String!): Deceased
  transmissions(id: String!): [Transmission!]
  visiting(id: String!): [Visiting!]
}

input RegisterInput {
  email: String!
  firstname: String!
  lastname: String!
  password: String!
}

"""Transmission object"""
type Transmission {
  by: String
  date: DateTime
  from: String
  fromAddress: String
  fromPlace: String
  to: String
  toAddress: String
  toPlace: String
}

"""The visiting model"""
type Visiting {
  date: DateTime
  kindOfVisit: String
  location: String
  specialNeeds: String
  timeOfArrival: DateTime
  timeOfLeave: DateTime
}
